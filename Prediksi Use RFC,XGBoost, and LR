{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":12008570,"sourceType":"datasetVersion","datasetId":7554744}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# **Setup and Load Data**","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\n# Core libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer # For handling potential missing values not in synthetic data but good practice\n\n# Models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier # A popular choice\n\n# Evaluation\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_auc_score, f1_score, precision_score, recall_score\n\n# Set plot style\nplt.style.use('seaborn-v0_8-whitegrid')\nsns.set_palette(\"pastel\")\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:41.987472Z","iopub.execute_input":"2025-05-30T16:10:41.987824Z","iopub.status.idle":"2025-05-30T16:10:41.999479Z","shell.execute_reply.started":"2025-05-30T16:10:41.987796Z","shell.execute_reply":"2025-05-30T16:10:41.998267Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/synthetic-parking-reservation-data-ai-generated/reservasi_parkir.csv\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"try:\n    df = pd.read_csv('/kaggle/input/synthetic-parking-reservation-data-ai-generated/reservasi_parkir.csv')\nexcept FileNotFoundError:\n    print(\"Error: 'reservasi_parkir.csv' not found. Please check the file path.\")\n    # You might need to adjust the path, e.g., '../input/your-dataset-name/reservasi_parkir.csv' on Kaggle\n    # For now, exiting if file not found\n    exit()\n\nprint(\"Dataset loaded successfully!\")\ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.001121Z","iopub.execute_input":"2025-05-30T16:10:42.001478Z","iopub.status.idle":"2025-05-30T16:10:42.040246Z","shell.execute_reply.started":"2025-05-30T16:10:42.001443Z","shell.execute_reply":"2025-05-30T16:10:42.039355Z"}},"outputs":[{"name":"stdout","text":"Dataset loaded successfully!\n","output_type":"stream"},{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"  id_reservasi id_slot_parkir id_pengguna tanggal_reservasi_target  \\\n0      RES0001            A01     USER001               2023-03-15   \n1      RES0002            B12     USER002               2023-03-15   \n2      RES0003            C05     USER003               2023-03-16   \n3      RES0004            A10     USER004               2023-03-17   \n4      RES0005            D20     USER005               2023-03-18   \n\n  jam_masuk_target jam_keluar_target  durasi_reservasi_menit tipe_kendaraan  \\\n0            08:00             10:00                     120          Mobil   \n1            09:30             12:30                     180          Motor   \n2            14:00             18:00                     240          Mobil   \n3            17:00             17:30                      30          Motor   \n4            10:00             16:00                     360          Mobil   \n\n  lantai_parkir_target hari_reservasi_target waktu_pembuatan_reservasi  \\\n0                   P1                  Rabu       2023-03-14 10:22:15   \n1                   P2                  Rabu       2023-03-15 08:10:05   \n2                   B1                 Kamis       2023-03-15 17:45:30   \n3                   P1                 Jumat       2023-03-17 16:50:11   \n4                   P3                 Sabtu       2023-03-10 11:00:00   \n\n         status_akhir_reservasi  total_biaya_rupiah prediksi_cuaca_pemesanan  \\\n0                       Selesai               10000                    Cerah   \n1                       Selesai                9000                    Cerah   \n2  Dikonfirmasi_Belum_Digunakan               20000                  Berawan   \n3                       Selesai                1000             Hujan Ringan   \n4                       Selesai               30000                    Cerah   \n\n  info_acara_khusus_pemesanan  estimasi_okupansi_saat_pesan  \n0                   Tidak_Ada                          0.45  \n1                   Tidak_Ada                          0.50  \n2                   Tidak_Ada                          0.60  \n3                   Tidak_Ada                          0.75  \n4                      Konser                          0.85  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id_reservasi</th>\n      <th>id_slot_parkir</th>\n      <th>id_pengguna</th>\n      <th>tanggal_reservasi_target</th>\n      <th>jam_masuk_target</th>\n      <th>jam_keluar_target</th>\n      <th>durasi_reservasi_menit</th>\n      <th>tipe_kendaraan</th>\n      <th>lantai_parkir_target</th>\n      <th>hari_reservasi_target</th>\n      <th>waktu_pembuatan_reservasi</th>\n      <th>status_akhir_reservasi</th>\n      <th>total_biaya_rupiah</th>\n      <th>prediksi_cuaca_pemesanan</th>\n      <th>info_acara_khusus_pemesanan</th>\n      <th>estimasi_okupansi_saat_pesan</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>RES0001</td>\n      <td>A01</td>\n      <td>USER001</td>\n      <td>2023-03-15</td>\n      <td>08:00</td>\n      <td>10:00</td>\n      <td>120</td>\n      <td>Mobil</td>\n      <td>P1</td>\n      <td>Rabu</td>\n      <td>2023-03-14 10:22:15</td>\n      <td>Selesai</td>\n      <td>10000</td>\n      <td>Cerah</td>\n      <td>Tidak_Ada</td>\n      <td>0.45</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>RES0002</td>\n      <td>B12</td>\n      <td>USER002</td>\n      <td>2023-03-15</td>\n      <td>09:30</td>\n      <td>12:30</td>\n      <td>180</td>\n      <td>Motor</td>\n      <td>P2</td>\n      <td>Rabu</td>\n      <td>2023-03-15 08:10:05</td>\n      <td>Selesai</td>\n      <td>9000</td>\n      <td>Cerah</td>\n      <td>Tidak_Ada</td>\n      <td>0.50</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>RES0003</td>\n      <td>C05</td>\n      <td>USER003</td>\n      <td>2023-03-16</td>\n      <td>14:00</td>\n      <td>18:00</td>\n      <td>240</td>\n      <td>Mobil</td>\n      <td>B1</td>\n      <td>Kamis</td>\n      <td>2023-03-15 17:45:30</td>\n      <td>Dikonfirmasi_Belum_Digunakan</td>\n      <td>20000</td>\n      <td>Berawan</td>\n      <td>Tidak_Ada</td>\n      <td>0.60</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>RES0004</td>\n      <td>A10</td>\n      <td>USER004</td>\n      <td>2023-03-17</td>\n      <td>17:00</td>\n      <td>17:30</td>\n      <td>30</td>\n      <td>Motor</td>\n      <td>P1</td>\n      <td>Jumat</td>\n      <td>2023-03-17 16:50:11</td>\n      <td>Selesai</td>\n      <td>1000</td>\n      <td>Hujan Ringan</td>\n      <td>Tidak_Ada</td>\n      <td>0.75</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>RES0005</td>\n      <td>D20</td>\n      <td>USER005</td>\n      <td>2023-03-18</td>\n      <td>10:00</td>\n      <td>16:00</td>\n      <td>360</td>\n      <td>Mobil</td>\n      <td>P3</td>\n      <td>Sabtu</td>\n      <td>2023-03-10 11:00:00</td>\n      <td>Selesai</td>\n      <td>30000</td>\n      <td>Cerah</td>\n      <td>Konser</td>\n      <td>0.85</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":12},{"cell_type":"markdown","source":"# **Exploratory Data Analysis (EDA) & Target Variable Preparation**","metadata":{}},{"cell_type":"code","source":"print(\"\\n--- Dataset Info ---\")\ndf.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.041080Z","iopub.execute_input":"2025-05-30T16:10:42.041421Z","iopub.status.idle":"2025-05-30T16:10:42.052446Z","shell.execute_reply.started":"2025-05-30T16:10:42.041391Z","shell.execute_reply":"2025-05-30T16:10:42.051610Z"}},"outputs":[{"name":"stdout","text":"\n--- Dataset Info ---\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 200 entries, 0 to 199\nData columns (total 16 columns):\n #   Column                        Non-Null Count  Dtype  \n---  ------                        --------------  -----  \n 0   id_reservasi                  200 non-null    object \n 1   id_slot_parkir                200 non-null    object \n 2   id_pengguna                   200 non-null    object \n 3   tanggal_reservasi_target      200 non-null    object \n 4   jam_masuk_target              200 non-null    object \n 5   jam_keluar_target             200 non-null    object \n 6   durasi_reservasi_menit        200 non-null    int64  \n 7   tipe_kendaraan                200 non-null    object \n 8   lantai_parkir_target          200 non-null    object \n 9   hari_reservasi_target         200 non-null    object \n 10  waktu_pembuatan_reservasi     200 non-null    object \n 11  status_akhir_reservasi        200 non-null    object \n 12  total_biaya_rupiah            200 non-null    int64  \n 13  prediksi_cuaca_pemesanan      200 non-null    object \n 14  info_acara_khusus_pemesanan   200 non-null    object \n 15  estimasi_okupansi_saat_pesan  200 non-null    float64\ndtypes: float64(1), int64(2), object(13)\nmemory usage: 25.1+ KB\n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"print(\"\\n--- Missing Values ---\")\nprint(df.isnull().sum())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.054246Z","iopub.execute_input":"2025-05-30T16:10:42.054579Z","iopub.status.idle":"2025-05-30T16:10:42.071663Z","shell.execute_reply.started":"2025-05-30T16:10:42.054554Z","shell.execute_reply":"2025-05-30T16:10:42.070764Z"}},"outputs":[{"name":"stdout","text":"\n--- Missing Values ---\nid_reservasi                    0\nid_slot_parkir                  0\nid_pengguna                     0\ntanggal_reservasi_target        0\njam_masuk_target                0\njam_keluar_target               0\ndurasi_reservasi_menit          0\ntipe_kendaraan                  0\nlantai_parkir_target            0\nhari_reservasi_target           0\nwaktu_pembuatan_reservasi       0\nstatus_akhir_reservasi          0\ntotal_biaya_rupiah              0\nprediksi_cuaca_pemesanan        0\ninfo_acara_khusus_pemesanan     0\nestimasi_okupansi_saat_pesan    0\ndtype: int64\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"print(\"\\n--- Descriptive Statistics (Numerical Features) ---\")\nprint(df.describe())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.072932Z","iopub.execute_input":"2025-05-30T16:10:42.073192Z","iopub.status.idle":"2025-05-30T16:10:42.099679Z","shell.execute_reply.started":"2025-05-30T16:10:42.073171Z","shell.execute_reply":"2025-05-30T16:10:42.098851Z"}},"outputs":[{"name":"stdout","text":"\n--- Descriptive Statistics (Numerical Features) ---\n       durasi_reservasi_menit  total_biaya_rupiah  \\\ncount              200.000000          200.000000   \nmean               207.745000        15800.000000   \nstd                148.680697        13157.721237   \nmin                 30.000000         1000.000000   \n25%                120.000000         6000.000000   \n50%                180.000000        11250.000000   \n75%                240.000000        20000.000000   \nmax                600.000000        50000.000000   \n\n       estimasi_okupansi_saat_pesan  \ncount                    200.000000  \nmean                       0.567950  \nstd                        0.164797  \nmin                        0.280000  \n25%                        0.440000  \n50%                        0.550000  \n75%                        0.700000  \nmax                        0.930000  \n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"print(\"\\n--- Descriptive Statistics (Categorical Features) ---\")\nprint(df.describe(include='object'))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.100574Z","iopub.execute_input":"2025-05-30T16:10:42.100852Z","iopub.status.idle":"2025-05-30T16:10:42.124239Z","shell.execute_reply.started":"2025-05-30T16:10:42.100830Z","shell.execute_reply":"2025-05-30T16:10:42.123340Z"}},"outputs":[{"name":"stdout","text":"\n--- Descriptive Statistics (Categorical Features) ---\n       id_reservasi id_slot_parkir id_pengguna tanggal_reservasi_target  \\\ncount           200            200         200                      200   \nunique          200            185          50                      168   \ntop         RES0001            A01     USER001               2023-03-15   \nfreq              1              2           6                        2   \n\n       jam_masuk_target jam_keluar_target tipe_kendaraan lantai_parkir_target  \\\ncount               200               200            200                  200   \nunique               48                53              2                    4   \ntop               10:00             17:00          Mobil                   P1   \nfreq                 15                15            130                   60   \n\n       hari_reservasi_target waktu_pembuatan_reservasi status_akhir_reservasi  \\\ncount                    200                       200                    200   \nunique                     7                       199                      4   \ntop                    Senin       2023-10-01 10:00:00                Selesai   \nfreq                      37                         2                    140   \n\n       prediksi_cuaca_pemesanan info_acara_khusus_pemesanan  \ncount                       200                         200  \nunique                        4                           4  \ntop                       Cerah                   Tidak_Ada  \nfreq                        108                         158  \n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"# Target Variable Preparation\n# Original statuses: 'Selesai', 'Dikonfirmasi_Belum_Digunakan', 'Dibatalkan_Pengguna', 'Tidak_Hadir'\nprint(\"\\n--- Original Target Variable Distribution ---\")\nprint(df['status_akhir_reservasi'].value_counts(normalize=True))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.125505Z","iopub.execute_input":"2025-05-30T16:10:42.125761Z","iopub.status.idle":"2025-05-30T16:10:42.140446Z","shell.execute_reply.started":"2025-05-30T16:10:42.125740Z","shell.execute_reply":"2025-05-30T16:10:42.139557Z"}},"outputs":[{"name":"stdout","text":"\n--- Original Target Variable Distribution ---\nstatus_akhir_reservasi\nSelesai                         0.70\nDikonfirmasi_Belum_Digunakan    0.15\nDibatalkan_Pengguna             0.10\nTidak_Hadir                     0.05\nName: proportion, dtype: float64\n","output_type":"stream"}],"execution_count":17},{"cell_type":"code","source":"# Create a binary target variable: 1 for Fulfilled, 0 for Not_Fulfilled\nfulfilled_statuses = ['Selesai', 'Dikonfirmasi_Belum_Digunakan']\ndf['target'] = df['status_akhir_reservasi'].apply(lambda x: 1 if x in fulfilled_statuses else 0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.141402Z","iopub.execute_input":"2025-05-30T16:10:42.141719Z","iopub.status.idle":"2025-05-30T16:10:42.160718Z","shell.execute_reply.started":"2025-05-30T16:10:42.141693Z","shell.execute_reply":"2025-05-30T16:10:42.159774Z"}},"outputs":[],"execution_count":18},{"cell_type":"code","source":"print(\"\\n--- New Binary Target Variable Distribution ---\")\nprint(df['target'].value_counts(normalize=True))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.162962Z","iopub.execute_input":"2025-05-30T16:10:42.163261Z","iopub.status.idle":"2025-05-30T16:10:42.185555Z","shell.execute_reply.started":"2025-05-30T16:10:42.163235Z","shell.execute_reply":"2025-05-30T16:10:42.184648Z"}},"outputs":[{"name":"stdout","text":"\n--- New Binary Target Variable Distribution ---\ntarget\n1    0.85\n0    0.15\nName: proportion, dtype: float64\n","output_type":"stream"}],"execution_count":19},{"cell_type":"code","source":"# Visualize the new target variable\nsns.countplot(x='target', data=df)\nplt.title('Distribution of Target Variable (0: Not_Fulfilled, 1: Fulfilled)')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.186988Z","iopub.execute_input":"2025-05-30T16:10:42.187429Z","iopub.status.idle":"2025-05-30T16:10:42.355101Z","shell.execute_reply.started":"2025-05-30T16:10:42.187404Z","shell.execute_reply":"2025-05-30T16:10:42.354276Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":20},{"cell_type":"markdown","source":"# **Feature Engineering & Preprocessing**","metadata":{}},{"cell_type":"code","source":"# Drop original target and irrelevant IDs for now\ndf_processed = df.drop(['id_reservasi', 'id_slot_parkir', 'id_pengguna', 'status_akhir_reservasi'], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.355976Z","iopub.execute_input":"2025-05-30T16:10:42.356247Z","iopub.status.idle":"2025-05-30T16:10:42.364162Z","shell.execute_reply.started":"2025-05-30T16:10:42.356218Z","shell.execute_reply":"2025-05-30T16:10:42.363219Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"# Convert datetime-like columns to actual datetime objects\ndf_processed['waktu_pembuatan_reservasi'] = pd.to_datetime(df_processed['waktu_pembuatan_reservasi'])\ndf_processed['tanggal_reservasi_target'] = pd.to_datetime(df_processed['tanggal_reservasi_target'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.366451Z","iopub.execute_input":"2025-05-30T16:10:42.366721Z","iopub.status.idle":"2025-05-30T16:10:42.389647Z","shell.execute_reply.started":"2025-05-30T16:10:42.366699Z","shell.execute_reply":"2025-05-30T16:10:42.388714Z"}},"outputs":[],"execution_count":22},{"cell_type":"code","source":"df_processed['pembuatan_reservasi_hour'] = df_processed['waktu_pembuatan_reservasi'].dt.hour\ndf_processed['pembuatan_reservasi_dayofweek'] = df_processed['waktu_pembuatan_reservasi'].dt.dayofweek # Monday=0, Sunday=6\ndf_processed['pembuatan_reservasi_month'] = df_processed['waktu_pembuatan_reservasi'].dt.month","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.390693Z","iopub.execute_input":"2025-05-30T16:10:42.391008Z","iopub.status.idle":"2025-05-30T16:10:42.409396Z","shell.execute_reply.started":"2025-05-30T16:10:42.390978Z","shell.execute_reply":"2025-05-30T16:10:42.408287Z"}},"outputs":[],"execution_count":23},{"cell_type":"code","source":"# Create booking_lead_time (in days)\n# Combine target date and entry time for accurate lead time calculation\ndf_processed['target_entry_datetime'] = df_processed.apply(\n    lambda row: pd.Timestamp.combine(row['tanggal_reservasi_target'], pd.to_datetime(row['jam_masuk_target']).time()),\n    axis=1\n)\ndf_processed['booking_lead_days'] = (df_processed['target_entry_datetime'] - df_processed['waktu_pembuatan_reservasi']).dt.total_seconds() / (24 * 60 * 60)\ndf_processed['booking_lead_days'] = df_processed['booking_lead_days'].apply(lambda x: max(0, x)) # Ensure non-negative","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.410375Z","iopub.execute_input":"2025-05-30T16:10:42.410676Z","iopub.status.idle":"2025-05-30T16:10:42.503697Z","shell.execute_reply.started":"2025-05-30T16:10:42.410652Z","shell.execute_reply":"2025-05-30T16:10:42.502778Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"# Extract hour from 'jam_masuk_target' and 'jam_keluar_target'\ndf_processed['jam_masuk_hour'] = pd.to_datetime(df_processed['jam_masuk_target'], format='%H:%M').dt.hour\ndf_processed['jam_keluar_hour'] = pd.to_datetime(df_processed['jam_keluar_target'], format='%H:%M').dt.hour","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.504443Z","iopub.execute_input":"2025-05-30T16:10:42.504686Z","iopub.status.idle":"2025-05-30T16:10:42.514075Z","shell.execute_reply.started":"2025-05-30T16:10:42.504665Z","shell.execute_reply":"2025-05-30T16:10:42.513044Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"# Drop original datetime columns that have been engineered or are redundant\ndf_processed = df_processed.drop(['waktu_pembuatan_reservasi', 'tanggal_reservasi_target', 'jam_masuk_target', 'jam_keluar_target', 'target_entry_datetime'], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.515094Z","iopub.execute_input":"2025-05-30T16:10:42.515493Z","iopub.status.idle":"2025-05-30T16:10:42.532018Z","shell.execute_reply.started":"2025-05-30T16:10:42.515460Z","shell.execute_reply":"2025-05-30T16:10:42.531141Z"}},"outputs":[],"execution_count":26},{"cell_type":"code","source":"# --- Define Feature Types ---\n# Identify numerical and categorical features\nnumerical_features = df_processed.select_dtypes(include=np.number).columns.tolist()\n# Remove target from numerical features if it's there by mistake (it is, in df_processed)\nif 'target' in numerical_features:\n    numerical_features.remove('target')\n\ncategorical_features = df_processed.select_dtypes(include='object').columns.tolist()\n\nprint(\"\\n--- Numerical Features ---\")\nprint(numerical_features)\nprint(\"\\n--- Categorical Features ---\")\nprint(categorical_features)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.533568Z","iopub.execute_input":"2025-05-30T16:10:42.534043Z","iopub.status.idle":"2025-05-30T16:10:42.553708Z","shell.execute_reply.started":"2025-05-30T16:10:42.534006Z","shell.execute_reply":"2025-05-30T16:10:42.552615Z"}},"outputs":[{"name":"stdout","text":"\n--- Numerical Features ---\n['durasi_reservasi_menit', 'total_biaya_rupiah', 'estimasi_okupansi_saat_pesan', 'pembuatan_reservasi_hour', 'pembuatan_reservasi_dayofweek', 'pembuatan_reservasi_month', 'booking_lead_days', 'jam_masuk_hour', 'jam_keluar_hour']\n\n--- Categorical Features ---\n['tipe_kendaraan', 'lantai_parkir_target', 'hari_reservasi_target', 'prediksi_cuaca_pemesanan', 'info_acara_khusus_pemesanan']\n","output_type":"stream"}],"execution_count":27},{"cell_type":"code","source":"# Separate features (X) and target (y)\nX = df_processed.drop('target', axis=1)\ny = df_processed['target']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.555889Z","iopub.execute_input":"2025-05-30T16:10:42.556246Z","iopub.status.idle":"2025-05-30T16:10:42.573992Z","shell.execute_reply.started":"2025-05-30T16:10:42.556193Z","shell.execute_reply":"2025-05-30T16:10:42.573089Z"}},"outputs":[],"execution_count":28},{"cell_type":"code","source":"# --- Create Preprocessing Pipelines ---\n# For numerical features: Impute missing values (if any) and scale\nnumerical_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy='median')), # Good practice, though our synthetic data might be clean\n    ('scaler', StandardScaler())\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.575050Z","iopub.execute_input":"2025-05-30T16:10:42.575650Z","iopub.status.idle":"2025-05-30T16:10:42.595618Z","shell.execute_reply.started":"2025-05-30T16:10:42.575619Z","shell.execute_reply":"2025-05-30T16:10:42.594686Z"}},"outputs":[],"execution_count":29},{"cell_type":"code","source":"# For categorical features: Impute missing values (if any) and one-hot encode\ncategorical_pipeline = Pipeline([\n    ('imputer', SimpleImputer(strategy='most_frequent')), # Good practice\n    ('onehot', OneHotEncoder(handle_unknown='ignore', sparse_output=False)) # sparse_output=False for easier handling with some models\n])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.596544Z","iopub.execute_input":"2025-05-30T16:10:42.596820Z","iopub.status.idle":"2025-05-30T16:10:42.614698Z","shell.execute_reply.started":"2025-05-30T16:10:42.596799Z","shell.execute_reply":"2025-05-30T16:10:42.613730Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"# Combine pipelines using ColumnTransformer\npreprocessor = ColumnTransformer([\n    ('numerical', numerical_pipeline, numerical_features),\n    ('categorical', categorical_pipeline, categorical_features)\n], remainder='passthrough') # 'passthrough' or 'drop' unlisted columns","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.615699Z","iopub.execute_input":"2025-05-30T16:10:42.615999Z","iopub.status.idle":"2025-05-30T16:10:42.632238Z","shell.execute_reply.started":"2025-05-30T16:10:42.615967Z","shell.execute_reply":"2025-05-30T16:10:42.631278Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"# --- Split Data ---\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y) # stratify for imbalanced classes\n\nprint(f\"\\nShape of X_train: {X_train.shape}\")\nprint(f\"Shape of X_test: {X_test.shape}\")\nprint(f\"Shape of y_train: {y_train.shape}\")\nprint(f\"Shape of y_test: {y_test.shape}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.633088Z","iopub.execute_input":"2025-05-30T16:10:42.633406Z","iopub.status.idle":"2025-05-30T16:10:42.655630Z","shell.execute_reply.started":"2025-05-30T16:10:42.633381Z","shell.execute_reply":"2025-05-30T16:10:42.654697Z"}},"outputs":[{"name":"stdout","text":"\nShape of X_train: (160, 14)\nShape of X_test: (40, 14)\nShape of y_train: (160,)\nShape of y_test: (40,)\n","output_type":"stream"}],"execution_count":32},{"cell_type":"markdown","source":"# **Model Training & Selection**","metadata":{}},{"cell_type":"code","source":"# --- Define Models ---\nmodels = {\n    \"Logistic Regression\": LogisticRegression(solver='liblinear', random_state=42),\n    \"Random Forest\": RandomForestClassifier(random_state=42),\n    \"XGBoost\": XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42) # use_label_encoder is deprecated\n}\n\nresults = {}","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.656555Z","iopub.execute_input":"2025-05-30T16:10:42.656868Z","iopub.status.idle":"2025-05-30T16:10:42.670148Z","shell.execute_reply.started":"2025-05-30T16:10:42.656844Z","shell.execute_reply":"2025-05-30T16:10:42.669278Z"}},"outputs":[],"execution_count":33},{"cell_type":"code","source":"# --- Train and Evaluate Models ---\nfor model_name, model in models.items():\n    print(f\"\\n--- Training {model_name} ---\")\n    \n    # Create the full pipeline\n    pipeline = Pipeline([\n        ('preprocessor', preprocessor),\n        ('classifier', model)\n    ])\n    \n    # Train the model\n    pipeline.fit(X_train, y_train)\n    \n    # Make predictions\n    y_pred = pipeline.predict(X_test)\n    y_pred_proba = pipeline.predict_proba(X_test)[:, 1] # For ROC-AUC\n    \n    # Evaluate\n    accuracy = accuracy_score(y_test, y_pred)\n    f1 = f1_score(y_test, y_pred)\n    precision = precision_score(y_test, y_pred)\n    recall = recall_score(y_test, y_pred)\n    roc_auc = roc_auc_score(y_test, y_pred_proba)\n    \n    results[model_name] = {\n        \"Accuracy\": accuracy,\n        \"F1 Score\": f1,\n        \"Precision\": precision,\n        \"Recall\": recall,\n        \"ROC-AUC\": roc_auc\n    }\n    \n    print(f\"\\n--- Evaluation for {model_name} ---\")\n    print(f\"Accuracy: {accuracy:.4f}\")\n    print(f\"F1 Score: {f1:.4f}\")\n    print(f\"Precision: {precision:.4f}\")\n    print(f\"Recall: {recall:.4f}\")\n    print(f\"ROC-AUC: {roc_auc:.4f}\")\n    \n    print(\"\\nClassification Report:\")\n    print(classification_report(y_test, y_pred))\n    \n    print(\"\\nConfusion Matrix:\")\n    cm = confusion_matrix(y_test, y_pred)\n    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')\n    plt.title(f'Confusion Matrix - {model_name}')\n    plt.xlabel('Predicted')\n    plt.ylabel('Actual')\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:42.671174Z","iopub.execute_input":"2025-05-30T16:10:42.671509Z","iopub.status.idle":"2025-05-30T16:10:43.552059Z","shell.execute_reply.started":"2025-05-30T16:10:42.671479Z","shell.execute_reply":"2025-05-30T16:10:43.551054Z"}},"outputs":[{"name":"stdout","text":"\n--- Training Logistic Regression ---\n\n--- Evaluation for Logistic Regression ---\nAccuracy: 0.9750\nF1 Score: 0.9851\nPrecision: 1.0000\nRecall: 0.9706\nROC-AUC: 1.0000\n\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       0.86      1.00      0.92         6\n           1       1.00      0.97      0.99        34\n\n    accuracy                           0.97        40\n   macro avg       0.93      0.99      0.95        40\nweighted avg       0.98      0.97      0.98        40\n\n\nConfusion Matrix:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\n--- Training Random Forest ---\n\n--- Evaluation for Random Forest ---\nAccuracy: 1.0000\nF1 Score: 1.0000\nPrecision: 1.0000\nRecall: 1.0000\nROC-AUC: 1.0000\n\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00         6\n           1       1.00      1.00      1.00        34\n\n    accuracy                           1.00        40\n   macro avg       1.00      1.00      1.00        40\nweighted avg       1.00      1.00      1.00        40\n\n\nConfusion Matrix:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"\n--- Training XGBoost ---\n\n--- Evaluation for XGBoost ---\nAccuracy: 1.0000\nF1 Score: 1.0000\nPrecision: 1.0000\nRecall: 1.0000\nROC-AUC: 1.0000\n\nClassification Report:\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00         6\n           1       1.00      1.00      1.00        34\n\n    accuracy                           1.00        40\n   macro avg       1.00      1.00      1.00        40\nweighted avg       1.00      1.00      1.00        40\n\n\nConfusion Matrix:\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":34},{"cell_type":"code","source":"# --- Compare Model Results ---\nresults_df = pd.DataFrame(results).T.sort_values(by=\"F1 Score\", ascending=False)\nprint(\"\\n--- Model Comparison ---\")\nprint(results_df)\n\nresults_df.plot(kind='bar', figsize=(12, 7))\nplt.title(\"Model Performance Comparison\")\nplt.ylabel(\"Score\")\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:10:43.553026Z","iopub.execute_input":"2025-05-30T16:10:43.553342Z","iopub.status.idle":"2025-05-30T16:10:43.881930Z","shell.execute_reply.started":"2025-05-30T16:10:43.553314Z","shell.execute_reply":"2025-05-30T16:10:43.881127Z"}},"outputs":[{"name":"stdout","text":"\n--- Model Comparison ---\n                     Accuracy  F1 Score  Precision    Recall  ROC-AUC\nRandom Forest           1.000  1.000000        1.0  1.000000      1.0\nXGBoost                 1.000  1.000000        1.0  1.000000      1.0\nLogistic Regression     0.975  0.985075        1.0  0.970588      1.0\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x700 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":35},{"cell_type":"code","source":"from sklearn.model_selection import cross_val_score\n\nfor model_name, model in models.items():\n    pipe = Pipeline([\n        ('preprocessor', preprocessor),\n        ('classifier', model)\n    ])\n    scores = cross_val_score(pipe, X, y, cv=5, scoring='f1')\n    print(f\"{model_name} - Mean F1: {scores.mean():.4f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:14:38.686378Z","iopub.execute_input":"2025-05-30T16:14:38.687289Z","iopub.status.idle":"2025-05-30T16:14:39.874360Z","shell.execute_reply.started":"2025-05-30T16:14:38.687253Z","shell.execute_reply":"2025-05-30T16:14:39.873786Z"}},"outputs":[{"name":"stdout","text":"Logistic Regression - Mean F1: 0.9971\nRandom Forest - Mean F1: 1.0000\nXGBoost - Mean F1: 1.0000\n","output_type":"stream"}],"execution_count":36},{"cell_type":"markdown","source":"# **Save Best Model**","metadata":{}},{"cell_type":"code","source":"import joblib\n\n# Misal model terbaik adalah Random Forest\nbest_model = Pipeline([\n    ('preprocessor', preprocessor),\n    ('classifier', RandomForestClassifier(random_state=42))\n])\n\nbest_model.fit(X_train, y_train)\n\n# Simpan\njoblib.dump(best_model, 'model_reservasi_parkir.pkl')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-30T16:17:05.840838Z","iopub.execute_input":"2025-05-30T16:17:05.841241Z","iopub.status.idle":"2025-05-30T16:17:06.031750Z","shell.execute_reply.started":"2025-05-30T16:17:05.841185Z","shell.execute_reply":"2025-05-30T16:17:06.030868Z"}},"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"['model_reservasi_parkir.pkl']"},"metadata":{}}],"execution_count":38}]}